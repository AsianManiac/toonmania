// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") 
  // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  Webtoon        Webtoon[]

  webtoonId String?
  Comment   Comment[]
  Like      Like[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Genre {
  id        String   @id @default(cuid())
  name      String?
  Webtoon   Webtoon? @relation(fields: [webtoonId], references: [id])
  webtoonId String?
}

// Define the Webtoon model for storing webtoon information.
model Webtoon {
  id            String    @id @default(cuid())
  title         String
  description   String
  coverImage    String // URL to the webtoon's cover image
  datePublished DateTime  @default(now())
  // Define the relationships with other tables.
  authorId      String
  author        User      @relation(fields: [authorId], references: [id])
  episodes      Episode[]
  genres        Genre[] // Many-to-many relationship with genres
  Like          Like[]
}

// Define the Episode model for storing episode information.
model Episode {
  id            String           @id @default(cuid())
  title         String
  description   String
  episodeNumber Int
  datePublished DateTime         @default(now())
  // Define the relationships with other tables.
  webtoon       Webtoon          @relation(fields: [webtoonId], references: [id])
  webtoonId     String
  contents      EpisodeContent[]
  comments      Comment[]
  likes         Like[]
}

// Define the EpisodeContent model for storing episode content (images).
model EpisodeContent {
  id         String  @id @default(cuid())
  imageUrl   String
  orderIndex Int // To maintain the order of content within an episode
  // Define the relationship with the Episode table.
  episode    Episode @relation(fields: [episodeId], references: [id])
  episodeId  String
}

// Define the Comment model for storing user comments.
model Comment {
  id        String   @id @default(cuid())
  text      String
  timestamp DateTime @default(now())
  // Define the relationships with other tables.
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  episode   Episode  @relation(fields: [episodeId], references: [id])
  episodeId String
}

// Define the Like model for tracking likes on webtoons and episodes.
model Like {
  id        String   @id @default(cuid())
  // Define the user who liked the webtoon/episode.
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  // Define the liked webtoon or episode.
  webtoon   Webtoon? @relation(fields: [webtoonId], references: [id])
  webtoonId String?
  episode   Episode? @relation(fields: [episodeId], references: [id])
  episodeId String?
}
