// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") 
  // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  Webtoon        Webtoon[]

  webtoonId String?
  Comment   Comment[]
  Like      Like[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Genre {
  id      String    @id @default(uuid())
  name    String    @unique
  webtoon Webtoon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Webtoon model for storing webtoon information.
model Webtoon {
  id            String        @id @default(uuid())
  authorId      String?
  title         String
  description   String?
  coverImage    String? // URL to the webtoon's cover image
  isPublished   Boolean       @default(false)
  datePublished DateTime?
  updateDay     String?
  // Define the relationships with other tables.
  genreId       String? // Many-to-many relationship with genres
  userId        String?
  attachments   Attachments[] // Many-to-many relationship with attachments
  Like          Like[]
  episodes      Episode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  genre     Genre?   @relation(fields: [genreId], references: [id])

  @@index([genreId])
}

// Define the Episode model for storing episode information.
model Episode {
  id            String        @id @default(uuid())
  title         String
  description   String?
  episodeNumber String?
  position      Int
  episodeUrl    String?
  datePublished DateTime?
  isPublished   Boolean       @default(false)
  isFree        Boolean?      @default(false)
  imageUrl      String?
  orderIndex    Int? // To maintain the order of content within an episode
  // Define the relationships with other tables.
  webtoon       Webtoon       @relation(fields: [webtoonId], references: [id], onDelete: Cascade)
  webtoonId     String
  attachments   Attachments[]
  comments      Comment[]
  likes         Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([webtoonId])
}

model Attachments {
  id   String @id @default(uuid())
  name String
  url  String

  toonId String
  toon   Webtoon @relation(fields: [toonId], references: [id], onDelete: Cascade)

  episodeId String?
  episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Comment model for storing user comments.
model Comment {
  id        String   @id @default(uuid())
  text      String
  timestamp DateTime @default(now())
  // Define the relationships with other tables.
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  episode   Episode  @relation(fields: [episodeId], references: [id])
  episodeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the Like model for tracking likes on webtoons and episodes.
model Like {
  id        String   @id @default(uuid())
  // Define the user who liked the webtoon/episode.
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  // Define the liked webtoon or episode.
  webtoon   Webtoon? @relation(fields: [webtoonId], references: [id])
  webtoonId String?
  episode   Episode? @relation(fields: [episodeId], references: [id])
  episodeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
